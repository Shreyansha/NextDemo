- name: Delete stale branches not linked to open or draft PRs
  run: |
    repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)
    dry_run=true  # Set to false to actually delete

    log_file="deleted-branches.txt"
    touch "$log_file"

    echo "Fetching branches for $repo..."

    gh api repos/$repo/branches --paginate --jq '.[].name' | while read branch; do
      if [[ "$branch" == "main" || "$branch" == "master" ]]; then
        echo "Skipping protected branch: $branch"
        continue
      fi

      # Check for open or draft PRs from this branch
      pr_data=$(gh api -X GET "repos/$repo/pulls?state=open&head=${repo##*/}:$branch")
      pr_count=$(echo "$pr_data" | jq 'length')
      draft_count=$(echo "$pr_data" | jq '[.[] | select(.draft == true)] | length')

      if [[ "$pr_count" -gt 0 || "$draft_count" -gt 0 ]]; then
        echo "Skipping branch $branch â€” linked to open/draft PR(s)"
        continue
      fi

      # Get last commit date and compare with threshold
      last_commit_date=$(gh api repos/$repo/commits/$branch -q '.commit.committer.date')
      last_commit_timestamp=$(date -d "$last_commit_date" +%s)
      threshold=$(date -d '30 days ago' +%s)

      if [ "$last_commit_timestamp" -lt "$threshold" ]; then
        echo "Stale branch detected: $branch (last commit: $last_commit_date)"
        if [ "$dry_run" = true ]; then
          echo "[Dry Run] Would delete: $branch" | tee -a "$log_file"
        else
          echo "Deleting branch: $branch" | tee -a "$log_file"
          gh api -X DELETE repos/$repo/git/refs/heads/$branch
        fi
      else
        echo "Branch $branch is not stale (last commit: $last_commit_date)"
      fi
    done

    echo "Done. Deleted branches (dry-run=$dry_run) logged to $log_file"
  env:
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- name: Upload deletion log
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: deleted-branches-log
    path: deleted-branches.txt
